// Jenkinsfile for NationalParks
podTemplate(
  label: "skopeo-pod",
  cloud: "openshift",
  inheritFrom: "maven",
  containers: [
    containerTemplate(
      name: "jnlp",
      image: "docker-registry.default.svc:5000/${GUID}-jenkins/jenkins-slave-appdev",
      resourceRequestMemory: "1Gi",
      resourceLimitMemory: "2Gi"
    )
  ]
) {
  node('skopeo-pod') {
    echo "GUID: ${GUID}"
    echo "CLUSTER: ${CLUSTER}"

    // Your Pipeline Code goes here. Make sure to use the ${GUID} and ${CLUSTER} parameters where appropriate
    // You need to build the application in directory `Nationalparks`.
    // Also copy "../nexus_settings.xml" to your build directory
    // and replace 'GUID' in the file with your ${GUID} to point to >your< Nexus instance
    def mvnCmd = "mvn -s ../nexus_settings.xml"

    stage('Checkout Source') {
      checkout scm
    }

    dir('Nationalparks') {
      
      // Extract version from the pom.xml
      def version = getVersionFromPom("pom.xml")
      // Extract group-id from the pom.xml
      def groupId    = getGroupIdFromPom("pom.xml")
      // Extract artifact-id from the pom.xml
      def artifactId = getArtifactIdFromPom("pom.xml")

      def devTag  = "${version}-${BUILD_NUMBER}"
      def prodTag = "${version}"

      // Using Maven build the war file
      stage('Build war') {
	echo "Building version ${devTag}"
	sh "${mvnCmd} clean package -DskipTests"
      }

      // Using Maven run the unit tests
      stage('Unit Tests') {
        echo "Running Unit Tests"
	sh "${mvnCmd} test"
      }

      // Using Maven to call SonarQube for Code Analysis
      stage('Code Analysis') {
	echo "Running Code Analysis"
	sh "${mvnCmd} sonar:sonar -Dsonar.host.url=http://sonarqube-${GUID}-sonarqube.apps.${CLUSTER} -Dsonar.projectName=${JOB_BASE_NAME}-${devTag}"
      }

      // Publish the built war file to Nexus
      stage('Publish to Nexus') {
	echo "Publish to Nexus"
	sh "${mvnCmd} deploy -DskipTests=true -DaltDeploymentRepository=nexus::default::http://nexus3-${GUID}-nexus.apps.${CLUSTER}/repository/releases"
      }

      // Build the OpenShift Image in OpenShift and tag it.
      stage('Build and Tag OpenShift Image') {
	echo "Building OpenShift container image tasks:${devTag}"
	sh "oc start-build nationalparks --follow --from-file=./target/nationalparks.war -n ${GUID}-parks-dev" 
	openshiftTag alias: 'false', destStream: "nationalparks", destTag: devTag, destinationNamespace: '${GUID}-parks-dev', namespace: '${GUID}-parks-dev', srcStream: "nationalparks", srcTag: 'latest', verbose: 'false'
      }

      // Deploy the built image to the Development Environment.
      stage('Deploy to Dev') {
	echo "Deploying container image to Development Project"

	// Update the Image on the Development Deployment Config
        sh "oc set image dc/nationalparks nationalparks=docker-registry.default.svc:5000/${GUID}-parks-dev/nationalparks:${devTag} -n ${GUID}-parks-dev"

	// Deploy the development application.
	openshiftDeploy depCfg: 'nationalparks', namespace: '${GUID}-parks-dev', verbose: 'false', waitTime: '', waitUnit: 'sec'
	openshiftVerifyDeployment depCfg: 'nationalparks', namespace: '${GUID}-parks-dev', replicaCount: '1', verbose: 'false', verifyReplicaCount: 'false', waitTime: '', waitUnit: 'sec'
	openshiftVerifyService namespace: '${GUID}-parks-dev', svcName: 'nationalparks', verbose: 'false'
      }

      // Run Integration Tests in the Development Environment
      stage('Integration Tests') {
	echo "Integration Tests"
	sh "curl http://nationalparks-${GUID}-parks-dev.apps.${CLUSTER}/ws/healthz/ | grep -q 'OK'"
      }

      // Copy Image to Nexus container registry
      stage('Copy Image to Nexus container registry') {
	echo "Copy image to Nexus container registry"
	
	sh "skopeo copy --src-tls-verify=false --dest-tls-verify=false --src-creds openshift:\$(oc whoami -t) --dest-creds admin:admin123 docker://docker-registry.default.svc.cluster.local:5000/${GUID}-parks-dev/nationalparks:${devTag} docker://nexus-registry.${GUID}-nexus.svc.cluster.local:5000/nationalparks:${devTag}"

	// Tag the built image with the production tag.
	openshiftTag alias: 'false', destStream: 'nationalparks', destTag: prodTag, destinationNamespace: '${GUID}-parks-dev', namespace: '${GUID}-parks-dev', srcStream: 'nationalparks', srcTag: devTag, verbose: 'false'
      }
      
      // Blue/Green Deployment into Production
      def destApp   = "nationalparks-green"
      def activeApp = ""

      stage('Blue/Green Production Deployment') {
	activeApp = sh(returnStdout: true, script: "oc get route nationalparks -n ${GUID}-parks-prod -o jsonpath='{ .spec.to.name }'").trim()

	if (activeApp == "nationalparks-green") {
	  destApp = "nationalparks-blue"
        }

        echo "Active Application:      " + activeApp
	echo "Destination Application: " + destApp

	// Update the Image on the Production Deployment Config
	sh "oc set image dc/${destApp} ${destApp}=docker-registry.default.svc:5000/${GUID}-parks-dev/nationalparks:${prodTag} -n ${GUID}-parks-prod"
	openshiftDeploy depCfg: destApp, namespace: '${GUID}-parks-prod', verbose: 'false', waitTime: '', waitUnit: 'sec'
	openshiftVerifyDeployment depCfg: destApp, namespace: '${GUID}-parks-prod', replicaCount: '1', verbose: 'false', verifyReplicaCount: 'true', waitTime: '', waitUnit: 'sec'
	openshiftVerifyService namespace: '${GUID}-parks-prod', svcName: destApp, verbose: 'false'
      }

      stage('Switch over to new Version') {
	echo "Switching Production application to ${destApp}."
	sh 'oc patch route nationalparks -n ${GUID}-parks-prod -p \'{"spec":{"to":{"name":"' + destApp + '"}}}\''
      }

    }
  }
}

// Convenience Functions to read variables from the pom.xml
// Do not change anything below this line.
def getVersionFromPom(pom) {
  def matcher = readFile(pom) =~ '<version>(.+)</version>'
  matcher ? matcher[0][1] : null
}
def getGroupIdFromPom(pom) {
  def matcher = readFile(pom) =~ '<groupId>(.+)</groupId>'
  matcher ? matcher[0][1] : null
}
def getArtifactIdFromPom(pom) {
  def matcher = readFile(pom) =~ '<artifactId>(.+)</artifactId>'
  matcher ? matcher[0][1] : null
}
